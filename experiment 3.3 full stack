# Creating a downloadable ZIP containing a ready-to-push full-stack blog app (frontend + backend + GitHub Actions workflow).
# This code will create files and directories under /mnt/data/blog-app, then create /mnt/data/blog-app.zip
import os, json, textwrap, zipfile, pathlib

BASE = "/mnt/data/blog-app"
os.makedirs(BASE, exist_ok=True)

# Helper to write files
def write(path, content):
    full = os.path.join(BASE, path)
    os.makedirs(os.path.dirname(full), exist_ok=True)
    with open(full, "w", encoding="utf-8") as f:
        f.write(content)

# Server files (minimal, ready-to-run with npm install)
write("server/package.json", json.dumps({
  "name":"blog-backend",
  "version":"1.0.0",
  "main":"server.js",
  "type":"module",
  "scripts":{"start":"node server.js","dev":"nodemon server.js"},
  "dependencies":{
    "bcryptjs":"^2.4.3",
    "cors":"^2.8.5",
    "dotenv":"^16.0.3",
    "express":"^4.18.2",
    "jsonwebtoken":"^9.0.2",
    "mongoose":"^8.0.0"
  },
  "devDependencies":{"nodemon":"^2.0.22"}
}, indent=2))

write("server/.env.example", textwrap.dedent("""\
PORT=5000
MONGO_URI=mongodb+srv://<user>:<pass>@cluster0.mongodb.net/blogdb?retryWrites=true&w=majority
JWT_SECRET=replace_with_a_long_random_secret
CLIENT_URL=http://localhost:3000
"""))

write("server/server.js", textwrap.dedent("""\
import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import mongoose from "mongoose";
import authRoutes from "./routes/authRoutes.js";
import postRoutes from "./routes/postRoutes.js";
import commentRoutes from "./routes/commentRoutes.js";
dotenv.config();
const app = express();
app.use(express.json());
app.use(cors({ origin: process.env.CLIENT_URL || "http://localhost:3000", credentials: true }));
mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/blogdb')
  .then(()=>console.log("âœ… MongoDB connected"))
  .catch(err=>console.error("MongoDB Error:", err));
app.use("/api/auth", authRoutes);
app.use("/api/posts", postRoutes);
app.use("/api/comments", commentRoutes);
app.get("/", (req,res)=>res.send("Blog API is running..."));
app.listen(process.env.PORT || 5000, ()=>console.log(`ðŸš€ Server running on port ${process.env.PORT || 5000}`));
"""))

write("server/models/User.js", textwrap.dedent("""\
import mongoose from "mongoose";
const userSchema = new mongoose.Schema({
  username:{type:String,required:true,unique:true},
  email:{type:String,required:true,unique:true},
  password:{type:String,required:true}
},{timestamps:true});
export default mongoose.model("User", userSchema);
"""))

write("server/models/Post.js", textwrap.dedent("""\
import mongoose from "mongoose";
const postSchema = new mongoose.Schema({
  title:String,
  content:String,
  author:{type:mongoose.Schema.Types.ObjectId, ref:"User"}
},{timestamps:true});
export default mongoose.model("Post", postSchema);
"""))

write("server/models/Comment.js", textwrap.dedent("""\
import mongoose from "mongoose";
const commentSchema = new mongoose.Schema({
  post:{type:mongoose.Schema.Types.ObjectId, ref:"Post"},
  user:{type:mongoose.Schema.Types.ObjectId, ref:"User"},
  text:String
},{timestamps:true});
export default mongoose.model("Comment", commentSchema);
"""))

write("server/controllers/authController.js", textwrap.dedent("""\
import User from "../models/User.js";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
export const register = async (req,res)=>{
  const {username,email,password} = req.body;
  if(!username||!email||!password) return res.status(400).json({message:"All fields required"});
  const exists = await User.findOne({email});
  if(exists) return res.status(400).json({message:"Email already in use"});
  const hashed = await bcrypt.hash(password,10);
  const user = new User({username,email,password:hashed});
  await user.save();
  res.status(201).json({message:"User registered",user:{id:user._id,username:user.username,email:user.email}});
};
export const login = async (req,res)=>{
  const {email,password} = req.body;
  if(!email||!password) return res.status(400).json({message:"All fields required"});
  const user = await User.findOne({email});
  if(!user) return res.status(400).json({message:"Invalid credentials"});
  const ok = await bcrypt.compare(password,user.password);
  if(!ok) return res.status(400).json({message:"Invalid credentials"});
  const token = jwt.sign({id:user._id}, process.env.JWT_SECRET, {expiresIn:"7d"});
  res.json({token,user:{id:user._id,username:user.username,email:user.email}});
};
"""))

write("server/controllers/postController.js", textwrap.dedent("""\
import Post from "../models/Post.js";
export const createPost = async (req,res)=>{
  const {title,content} = req.body;
  if(!title||!content) return res.status(400).json({message:"Title and content required"});
  const post = new Post({title,content,author:req.user.id});
  await post.save();
  res.status(201).json(post);
};
export const getPosts = async (req,res)=>{
  const posts = await Post.find().populate("author","username").sort({createdAt:-1});
  res.json(posts);
};
export const getPost = async (req,res)=>{
  const post = await Post.findById(req.params.id).populate("author","username");
  if(!post) return res.status(404).json({message:"Post not found"});
  res.json(post);
};
"""))

write("server/controllers/commentController.js", textwrap.dedent("""\
import Comment from "../models/Comment.js";
import Post from "../models/Post.js";
export const addComment = async (req,res)=>{
  const {postId} = req.params;
  const {text} = req.body;
  const post = await Post.findById(postId);
  if(!post) return res.status(404).json({message:"Post not found"});
  const comment = new Comment({post:post._id,user:req.user.id,text});
  await comment.save();
  res.status(201).json(comment);
};
export const getCommentsForPost = async (req,res)=>{
  const {postId} = req.params;
  const comments = await Comment.find({post:postId}).populate("user","username");
  res.json(comments);
};
"""))

write("server/middleware/authMiddleware.js", textwrap.dedent("""\
import jwt from "jsonwebtoken";
export const protect = (req,res,next)=>{
  const header = req.headers.authorization;
  if(!header) return res.status(401).json({message:"No token"});
  const token = header.split(" ")[1];
  try{
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = { id: decoded.id };
    next();
  }catch(err){
    return res.status(401).json({message:"Invalid token"});
  }
};
"""))

write("server/routes/authRoutes.js", textwrap.dedent("""\
import express from "express";
import { register, login } from "../controllers/authController.js";
const router = express.Router();
router.post("/register", register);
router.post("/login", login);
export default router;
"""))

write("server/routes/postRoutes.js", textwrap.dedent("""\
import express from "express";
import { createPost, getPosts, getPost } from "../controllers/postController.js";
import { protect } from "../middleware/authMiddleware.js";
const router = express.Router();
router.get("/", getPosts);
router.post("/", protect, createPost);
router.get("/:id", getPost);
export default router;
"""))

write("server/routes/commentRoutes.js", textwrap.dedent("""\
import express from "express";
import { addComment, getCommentsForPost } from "../controllers/commentController.js";
import { protect } from "../middleware/authMiddleware.js";
const router = express.Router();
router.post("/:postId", protect, addComment);
router.get("/:postId", getCommentsForPost);
export default router;
"""))

# Client (React app) - using Create React App structure for simplicity
write("client/package.json", json.dumps({
  "name":"blog-frontend",
  "version":"1.0.0",
  "private":True,
  "dependencies":{
    "axios":"^1.6.0",
    "react":"^18.2.0",
    "react-dom":"^18.2.0",
    "react-router-dom":"^6.21.0",
    "react-scripts":"5.0.1"
  },
  "scripts":{"start":"react-scripts start","build":"react-scripts build","test":"react-scripts test"}
}, indent=2))

write("client/.env.example", textwrap.dedent("""\
REACT_APP_API_URL=http://localhost:5000/api
"""))

write("client/public/index.html", textwrap.dedent("""\
<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Blog App</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>
"""))

write("client/src/index.js", textwrap.dedent("""\
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import './styles.css';
createRoot(document.getElementById('root')).render(<App />);
"""))

write("client/src/App.js", textwrap.dedent("""\
import React from 'react';
import { BrowserRouter, Routes, Route, Link } from 'react-router-dom';
import Home from './pages/Home';
import Login from './pages/Login';
import Register from './pages/Register';
import CreatePost from './pages/CreatePost';
export default function App(){
  return (
    <BrowserRouter>
      <nav className="nav"><Link to="/">Home</Link> <Link to="/create">Create</Link> <Link to="/login">Login</Link></nav>
      <div className="container">
        <Routes>
          <Route path="/" element={<Home/>} />
          <Route path="/login" element={<Login/>} />
          <Route path="/register" element={<Register/>} />
          <Route path="/create" element={<CreatePost/>} />
        </Routes>
      </div>
    </BrowserRouter>
  );
}
"""))

write("client/src/api.js", textwrap.dedent("""\
import axios from 'axios';
const API = axios.create({ baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api' });
export default API;
"""))

write("client/src/styles.css", textwrap.dedent("""\
body{font-family:Arial,sans-serif;margin:0}
.nav{background:#222;color:#fff;padding:10px}
.nav a{color:#fff;margin-right:12px;text-decoration:none}
.container{padding:20px}
.card{border:1px solid #ddd;padding:12px;margin-bottom:12px;border-radius:6px}
"""))

# Client pages: Home, Login, Register, CreatePost
write("client/src/pages/Home.js", textwrap.dedent("""\
import React, {useEffect, useState} from 'react';
import API from '../api';
export default function Home(){
  const [posts,setPosts]=useState([]);
  useEffect(()=>{API.get('/posts').then(r=>setPosts(r.data)).catch(console.error)},[]);
  return (
    <div>
      <h1>Posts</h1>
      {posts.map(p=>(
        <div key={p._id} className="card">
          <h3>{p.title}</h3>
          <div>By: {p.author?.username}</div>
          <p>{p.content?.slice(0,200)}...</p>
        </div>
      ))}
    </div>
  );
}
"""))

write("client/src/pages/Login.js", textwrap.dedent("""\
import React, {useState} from 'react';
import API from '../api';
export default function Login(){
  const [form,setForm]=useState({email:'',password:''});
  const [msg,setMsg]=useState('');
  const change=e=>setForm({...form,[e.target.name]:e.target.value});
  const submit=async e=>{e.preventDefault(); try{const res=await API.post('/auth/login',form); localStorage.setItem('token',res.data.token); setMsg('Logged in'); }catch(err){setMsg(err.response?.data?.message||err.message)}};
  return (<div className="card"><h2>Login</h2><form onSubmit={submit}><input name="email" placeholder="Email" value={form.email} onChange={change}/><input name="password" type="password" placeholder="Password" value={form.password} onChange={change}/><button>Login</button></form><div>{msg}</div></div>);
}
"""))

write("client/src/pages/Register.js", textwrap.dedent("""\
import React, {useState} from 'react';
import API from '../api';
export default function Register(){
  const [form,setForm]=useState({username:'',email:'',password:''});
  const [msg,setMsg]=useState('');
  const change=e=>setForm({...form,[e.target.name]:e.target.value});
  const submit=async e=>{e.preventDefault(); try{await API.post('/auth/register',form); setMsg('Registered - please login'); }catch(err){setMsg(err.response?.data?.message||err.message)}};
  return (<div className="card"><h2>Register</h2><form onSubmit={submit}><input name="username" placeholder="Username" value={form.username} onChange={change}/><input name="email" placeholder="Email" value={form.email} onChange={change}/><input name="password" type="password" placeholder="Password" value={form.password} onChange={change}/><button>Register</button></form><div>{msg}</div></div>);
}
"""))

write("client/src/pages/CreatePost.js", textwrap.dedent("""\
import React, {useState} from 'react';
import API from '../api';
export default function CreatePost(){
  const [form,setForm]=useState({title:'',content:''});
  const change=e=>setForm({...form,[e.target.name]:e.target.value});
  const submit=async e=>{e.preventDefault(); try{const token=localStorage.getItem('token'); await API.post('/posts', form, {headers:{Authorization:`Bearer ${token}`}}); alert('Created'); }catch(err){alert(err.response?.data?.message||err.message)}};
  return (<div className="card"><h2>Create Post</h2><form onSubmit={submit}><input name="title" placeholder="Title" value={form.title} onChange={change}/><textarea name="content" placeholder="Content" value={form.content} onChange={change}/><button>Create</button></form></div>);
}
"""))

# GitHub Actions workflow to deploy: note we will provide instructions to use Render & Vercel; this workflow builds and uploads artifacts (simple)
write(".github/workflows/deploy.yml", textwrap.dedent("""\
name: CI - build frontend & backend
on:
  push:
    branches: [ main ]
jobs:
  build-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - uses: actions/checkout@v4
      - name: Use Node
        uses: actions/setup-node@v4
        with: node-version: 18
      - name: Install backend deps
        run: npm ci
      - name: Run backend lint/test (if any)
        run: |
          echo "No tests configured"

  build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client
    steps:
      - uses: actions/checkout@v4
      - name: Use Node
        uses: actions/setup-node@v4
        with: node-version: 18
      - name: Install frontend deps
        run: npm ci
      - name: Build frontend
        run: npm run build
"""))

write("README.md", textwrap.dedent("""\
# Blog App (Full-stack) - Ready to deploy

This repository contains a minimal full-stack blog application:
- Backend: Node.js + Express + MongoDB (Mongoose)
- Frontend: React (Create React App)
- Authentication: JWT (login/register)
- CI: GitHub Actions workflow builds frontend & backend on push to main

## To run locally

### Backend
1. `cd server`
2. copy `.env.example` to `.env` and set `MONGO_URI` and `JWT_SECRET`
3. `npm install`
4. `npm run dev` (requires nodemon) or `npm start`

### Frontend
1. `cd client`
2. copy `.env.example` to `.env` and set `REACT_APP_API_URL` (e.g., http://localhost:5000/api)
3. `npm install`
4. `npm start`

## Deploy
- Host backend on Render / Heroku / Railway and set environment variables there.
- Host frontend on Vercel / Netlify and point `REACT_APP_API_URL` to your backend URL.

"""))

# Create zip
zip_path = "/mnt/data/blog-app.zip"
with zipfile.ZipFile(zip_path, "w", zipfile.ZIP_DEFLATED) as zf:
    for root, dirs, files in os.walk(BASE):
        for file in files:
            fullpath = os.path.join(root, file)
            arcname = os.path.relpath(fullpath, BASE)
            zf.write(fullpath, arcname)

zip_path

