from pathlib import Path
import zipfile

# Define folder structure for JWT-protected API project
project_root = Path("/mnt/data/jwt-protected-api")
(project_root / "middleware").mkdir(parents=True, exist_ok=True)
(project_root / "routes").mkdir(parents=True, exist_ok=True)

# File: package.json
package_json = """
{
  "name": "jwt-protected-api",
  "version": "1.0.0",
  "description": "Node.js Express app with JWT-based protected routes",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.0",
    "mongoose": "^7.0.3"
  },
  "devDependencies": {
    "nodemon": "^3.0.2"
  }
}
"""

# File: server.js
server_js = """
const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

dotenv.config();
const app = express();
app.use(express.json());

mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.error('MongoDB connection error:', err));

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(process.env.PORT || 5000, () => console.log(`Server running on port ${process.env.PORT || 5000}`));
"""

# File: models/User.js
user_model = """
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true }
});

userSchema.pre('save', async function(next) {
  if (!this.isModified('password')) return next();
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

userSchema.methods.comparePassword = async function(candidatePassword) {
  return await bcrypt.compare(candidatePassword, this.password);
};

module.exports = mongoose.model('User', userSchema);
"""

# File: routes/auth.js
auth_routes = """
const express = require('express');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const router = express.Router();

router.post('/register', async (req, res) => {
  try {
    const { username, password } = req.body;
    const user = new User({ username, password });
    await user.save();
    res.status(201).json({ message: 'User registered successfully' });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

router.post('/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    const user = await User.findOne({ username });
    if (!user) return res.status(401).json({ message: 'Invalid credentials' });

    const isMatch = await user.comparePassword(password);
    if (!isMatch) return res.status(401).json({ message: 'Invalid credentials' });

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
    res.json({ token });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;
"""

# File: middleware/authMiddleware.js
auth_middleware = """
const jwt = require('jsonwebtoken');

module.exports = function(req, res, next) {
  const token = req.header('Authorization')?.replace('Bearer ', '');
  if (!token) return res.status(401).json({ message: 'Access denied. No token provided.' });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (err) {
    res.status(400).json({ message: 'Invalid token.' });
  }
};
"""

# File: routes/protected.js
protected_routes = """
const express = require('express');
const auth = require('../middleware/authMiddleware');
const router = express.Router();

router.get('/', auth, (req, res) => {
  res.json({ message: `Welcome, user ${req.user.id}. You have access.` });
});

module.exports = router;
"""

# File: .env.example
env_example = """
PORT=5000
MONGO_URI=mongodb+srv://your-mongo-uri
JWT_SECRET=your_jwt_secret
"""

# Write all files
(project_root / "package.json").write_text(package_json)
(project_root / "server.js").write_text(server_js)
(project_root / "models").mkdir(exist_ok=True)
(project_root / "models" / "User.js").write_text(user_model)
(project_root / "routes" / "auth.js").write_text(auth_routes)
(project_root / "routes" / "protected.js").write_text(protected_routes)
(project_root / "middleware" / "authMiddleware.js").write_text(auth_middleware)
(project_root / ".env.example").write_text(env_example)

# Zip project
zip_path = Path("/mnt/data/jwt-protected-api.zip")
with zipfile.ZipFile(zip_path, "w", zipfile.ZIP_DEFLATED) as zipf:
    for file in project_root.rglob("*"):
        zipf.write(file, file.relative_to(project_root.parent))

zip_path
