# Creating a Student Management System (MVC) Node.js + Express + MongoDB project and zipping it.
from pathlib import Path
import zipfile, textwrap, json, os

BASE = Path("/mnt/data/student-management-system")
( BASE / "models").mkdir(parents=True, exist_ok=True)
( BASE / "controllers").mkdir(parents=True, exist_ok=True)
( BASE / "routes").mkdir(parents=True, exist_ok=True)
( BASE / "views").mkdir(parents=True, exist_ok=True)
( BASE / "public" / "css").mkdir(parents=True, exist_ok=True)

def write(path, content):
    full = BASE / path
    full.parent.mkdir(parents=True, exist_ok=True)
    full.write_text(content, encoding="utf-8")

# package.json
write("package.json", json.dumps({
  "name":"student-management-system",
  "version":"1.0.0",
  "description":"A simple Student Management System (MVC) using Node.js, Express, MongoDB, EJS",
  "main":"server.js",
  "scripts":{
    "start":"node server.js",
    "dev":"nodemon server.js"
  },
  "dependencies":{
    "express":"^4.18.2",
    "mongoose":"^8.0.0",
    "dotenv":"^16.0.3",
    "ejs":"^3.1.9",
    "body-parser":"^1.20.2",
    "method-override":"^3.0.0"
  },
  "devDependencies":{
    "nodemon":"^2.0.22"
  }
}, indent=2))

# .env.example
write(".env.example", textwrap.dedent("""\
PORT=3000
MONGO_URI=mongodb://localhost:27017/smsdb
"""))

# server.js
write("server.js", textwrap.dedent("""\
import express from 'express';
import dotenv from 'dotenv';
import mongoose from 'mongoose';
import methodOverride from 'method-override';
import path from 'path';
import { fileURLToPath } from 'url';

import studentRoutes from './routes/students.js';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(methodOverride('_method'));
app.use(express.static(path.join(__dirname, 'public')));

mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/smsdb')
  .then(()=>console.log('MongoDB connected'))
  .catch(err=>console.error('MongoDB error', err));

app.use('/students', studentRoutes);

app.get('/', (req,res)=> res.redirect('/students'));

const PORT = process.env.PORT || 3000;
app.listen(PORT, ()=> console.log(`Server running on port ${PORT}`));
"""))

# models/Student.js
write("models/Student.js", textwrap.dedent("""\
import mongoose from 'mongoose';

const studentSchema = new mongoose.Schema({
  firstName: { type: String, required: true },
  lastName: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  age: { type: Number },
  course: { type: String },
  enrolled: { type: Boolean, default: true }
}, { timestamps: true });

export default mongoose.model('Student', studentSchema);
"""))

# controllers/studentController.js
write("controllers/studentController.js", textwrap.dedent("""\
import Student from '../models/Student.js';

// List students with simple pagination and search
export const index = async (req, res) => {
  const q = req.query.q || '';
  const page = parseInt(req.query.page || '1');
  const limit = 10;
  const filter = q ? { $or:[{ firstName: new RegExp(q,'i') }, { lastName: new RegExp(q,'i') }, { email: new RegExp(q,'i') }] } : {};
  const total = await Student.countDocuments(filter);
  const students = await Student.find(filter).skip((page-1)*limit).limit(limit).sort({ createdAt: -1 });
  res.render('students/index', { students, q, page, total, limit });
};

export const newForm = (req, res) => {
  res.render('students/new');
};

export const create = async (req, res) => {
  try {
    const { firstName, lastName, email, age, course } = req.body;
    await Student.create({ firstName, lastName, email, age, course });
    res.redirect('/students');
  } catch (err) {
    res.status(400).send('Error creating student: ' + err.message);
  }
};

export const show = async (req, res) => {
  const student = await Student.findById(req.params.id);
  if (!student) return res.status(404).send('Student not found');
  res.render('students/show', { student });
};

export const editForm = async (req, res) => {
  const student = await Student.findById(req.params.id);
  if (!student) return res.status(404).send('Student not found');
  res.render('students/edit', { student });
};

export const update = async (req, res) => {
  try {
    const { firstName, lastName, email, age, course, enrolled } = req.body;
    await Student.findByIdAndUpdate(req.params.id, { firstName, lastName, email, age, course, enrolled: enrolled === 'on' });
    res.redirect('/students/' + req.params.id);
  } catch (err) {
    res.status(400).send('Error updating student: ' + err.message);
  }
};

export const remove = async (req, res) => {
  await Student.findByIdAndDelete(req.params.id);
  res.redirect('/students');
};
"""))

# routes/students.js
write("routes/students.js", textwrap.dedent("""\
import express from 'express';
import * as studentController from '../controllers/studentController.js';

const router = express.Router();

router.get('/', studentController.index);
router.get('/new', studentController.newForm);
router.post('/', studentController.create);
router.get('/:id', studentController.show);
router.get('/:id/edit', studentController.editForm);
router.put('/:id', studentController.update);
router.delete('/:id', studentController.remove);

export default router;
"""))

# views layout and student views (EJS)
write("views/partials/header.ejs", textwrap.dedent("""\
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Student Management System</title>
  <link rel="stylesheet" href="/css/styles.css" />
</head>
<body>
  <header>
    <h1><a href="/students">Student Management</a></h1>
    <nav><a href="/students">Home</a> | <a href="/students/new">Add Student</a></nav>
  </header>
  <main>
"""))

write("views/partials/footer.ejs", textwrap.dedent("""\
  </main>
  <footer><p>&copy; Student Management System</p></footer>
</body>
</html>
"""))

write("views/students/index.ejs", textwrap.dedent("""\
<%- include('../partials/header') %>
<section>
  <form method="get" action="/students" style="margin-bottom:1rem">
    <input type="text" name="q" placeholder="Search by name or email" value="<%= q %>" />
    <button type="submit">Search</button>
  </form>

  <table>
    <thead><tr><th>Name</th><th>Email</th><th>Course</th><th>Actions</th></tr></thead>
    <tbody>
      <% students.forEach(function(s){ %>
        <tr>
          <td><a href="/students/<%= s._id %>"><%= s.firstName %> <%= s.lastName %></a></td>
          <td><%= s.email %></td>
          <td><%= s.course %></td>
          <td>
            <a href="/students/<%= s._id %>/edit">Edit</a> |
            <form action="/students/<%= s._id %>?_method=DELETE" method="post" style="display:inline">
              <button type="submit" onclick="return confirm('Delete student?')">Delete</button>
            </form>
          </td>
        </tr>
      <% }) %>
    </tbody>
  </table>

  <div class="pagination">
    <% if (page>1) { %>
      <a href="/students?page=<%= page-1 %>&q=<%= q %>">Previous</a>
    <% } %>
    <span>Page <%= page %></span>
    <% if ( (page*limit) < total ) { %>
      <a href="/students?page=<%= page+1 %>&q=<%= q %>">Next</a>
    <% } %>
  </div>
</section>
<%- include('../partials/footer') %>
"""))

write("views/students/new.ejs", textwrap.dedent("""\
<%- include('../partials/header') %>
<section>
  <h2>Add Student</h2>
  <form method="post" action="/students">
    <label>First name: <input name="firstName" required /></label><br/>
    <label>Last name: <input name="lastName" required /></label><br/>
    <label>Email: <input name="email" type="email" required /></label><br/>
    <label>Age: <input name="age" type="number" /></label><br/>
    <label>Course: <input name="course" /></label><br/>
    <button type="submit">Create</button>
  </form>
</section>
<%- include('../partials/footer') %>
"""))

write("views/students/show.ejs", textwrap.dedent("""\
<%- include('../partials/header') %>
<section>
  <h2><%= student.firstName %> <%= student.lastName %></h2>
  <p><strong>Email:</strong> <%= student.email %></p>
  <p><strong>Age:</strong> <%= student.age %></p>
  <p><strong>Course:</strong> <%= student.course %></p>
  <p><strong>Enrolled:</strong> <%= student.enrolled ? 'Yes' : 'No' %></p>
  <p><a href="/students/<%= student._id %>/edit">Edit</a></p>
</section>
<%- include('../partials/footer') %>
"""))

write("views/students/edit.ejs", textwrap.dedent("""\
<%- include('../partials/header') %>
<section>
  <h2>Edit Student</h2>
  <form method="post" action="/students/<%= student._id %>?_method=PUT">
    <label>First name: <input name="firstName" value="<%= student.firstName %>" required /></label><br/>
    <label>Last name: <input name="lastName" value="<%= student.lastName %>" required /></label><br/>
    <label>Email: <input name="email" type="email" value="<%= student.email %>" required /></label><br/>
    <label>Age: <input name="age" type="number" value="<%= student.age %>" /></label><br/>
    <label>Course: <input name="course" value="<%= student.course %>" /></label><br/>
    <label>Enrolled: <input name="enrolled" type="checkbox" <%= student.enrolled ? 'checked' : '' %> /></label><br/>
    <button type="submit">Save</button>
  </form>
</section>
<%- include('../partials/footer') %>
"""))

# public css
write("public/css/styles.css", textwrap.dedent("""\
body{font-family:Arial,Helvetica,sans-serif;margin:0;padding:0}
header{background:#2b79c6;color:white;padding:1rem}
header a{color:white;text-decoration:none}
main{padding:1rem}
table{width:100%;border-collapse:collapse;margin-top:1rem}
table th, table td{border:1px solid #ddd;padding:8px;text-align:left}
.card{border:1px solid #ccc;padding:12px;border-radius:6px}
form label{display:block;margin:6px 0}
.pagination{margin-top:1rem}
"""))

# README
write("README.md", textwrap.dedent("""\
# Student Management System (MVC) - Node.js, Express, MongoDB

This is a minimal Student Management System demonstrating the MVC pattern using:
- Node.js + Express
- MongoDB with Mongoose
- EJS templates for views
- Method-override for PUT/DELETE via forms

## Features
- List students with search and pagination
- Create, view, update, delete students
- MVC structure: models, views, controllers, routes

## Getting started (local)
1. Install dependencies:
   ```bash
   npm install
