from pathlib import Path
import zipfile

# Define project folder structure
project_root = Path("/mnt/data/secure-banking-api")
(project_root / "models").mkdir(parents=True, exist_ok=True)
(project_root / "routes").mkdir(parents=True, exist_ok=True)
(project_root / "middleware").mkdir(parents=True, exist_ok=True)

# package.json
package_json = """
{
  "name": "secure-banking-api",
  "version": "1.0.0",
  "description": "Banking API secured using JWT authentication and authorization",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.0",
    "mongoose": "^7.0.3"
  },
  "devDependencies": {
    "nodemon": "^3.0.2"
  }
}
"""

# server.js
server_js = """
const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const authRoutes = require('./routes/auth');
const bankingRoutes = require('./routes/banking');

dotenv.config();
const app = express();
app.use(express.json());

mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('✅ MongoDB connected'))
  .catch(err => console.error('❌ MongoDB connection error:', err));

app.use('/api/auth', authRoutes);
app.use('/api/banking', bankingRoutes);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));
"""

# models/User.js
user_model = """
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  role: { type: String, enum: ['user', 'admin'], default: 'user' },
  balance: { type: Number, default: 1000 }
});

userSchema.pre('save', async function(next) {
  if (!this.isModified('password')) return next();
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

userSchema.methods.comparePassword = async function(candidatePassword) {
  return await bcrypt.compare(candidatePassword, this.password);
};

module.exports = mongoose.model('User', userSchema);
"""

# middleware/auth.js
auth_middleware = """
const jwt = require('jsonwebtoken');

exports.authenticateToken = (req, res, next) => {
  const token = req.header('Authorization')?.replace('Bearer ', '');
  if (!token) return res.status(401).json({ message: 'Access denied. No token provided.' });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (err) {
    res.status(400).json({ message: 'Invalid token.' });
  }
};

exports.authorizeRole = (role) => {
  return (req, res, next) => {
    if (req.user.role !== role) {
      return res.status(403).json({ message: 'Access forbidden: insufficient privileges.' });
    }
    next();
  };
};
"""

# routes/auth.js
auth_routes = """
const express = require('express');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const router = express.Router();

router.post('/register', async (req, res) => {
  try {
    const { username, password, role } = req.body;
    const user = new User({ username, password, role });
    await user.save();
    res.status(201).json({ message: 'User registered successfully' });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

router.post('/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    const user = await User.findOne({ username });
    if (!user) return res.status(401).json({ message: 'Invalid credentials' });

    const isMatch = await user.comparePassword(password);
    if (!isMatch) return res.status(401).json({ message: 'Invalid credentials' });

    const token = jwt.sign({ id: user._id, role: user.role }, process.env.JWT_SECRET, { expiresIn: '1h' });
    res.json({ token });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;
"""

# routes/banking.js
banking_routes = """
const express = require('express');
const User = require('../models/User');
const { authenticateToken, authorizeRole } = require('../middleware/auth');
const router = express.Router();

// Get balance (protected)
router.get('/balance', authenticateToken, async (req, res) => {
  const user = await User.findById(req.user.id);
  res.json({ username: user.username, balance: user.balance });
});

// Transfer funds (protected)
router.post('/transfer', authenticateToken, async (req, res) => {
  const { recipient, amount } = req.body;
  const sender = await User.findById(req.user.id);
  const receiver = await User.findOne({ username: recipient });

  if (!receiver) return res.status(404).json({ message: 'Recipient not found' });
  if (sender.balance < amount) return res.status(400).json({ message: 'Insufficient funds' });

  sender.balance -= amount;
  receiver.balance += amount;

  await sender.save();
  await receiver.save();

  res.json({ message: `Transferred ${amount} to ${recipient}` });
});

// Admin route: view all users
router.get('/all-users', authenticateToken, authorizeRole('admin'), async (req, res) => {
  const users = await User.find().select('-password');
  res.json(users);
});

module.exports = router;
"""

# .env.example
env_example = """
PORT=5000
MONGO_URI=mongodb+srv://your-mongo-uri
JWT_SECRET=your_jwt_secret
"""

# Write all files
(project_root / "package.json").write_text(package_json)
(project_root / "server.js").write_text(server_js)
(project_root / "models" / "User.js").write_text(user_model)
(project_root / "middleware" / "auth.js").write_text(auth_middleware)
(project_root / "routes" / "auth.js").write_text(auth_routes)
(project_root / "routes" / "banking.js").write_text(banking_routes)
(project_root / ".env.example").write_text(env_example)

# Zip project
zip_path = Path("/mnt/data/secure-banking-api.zip")
with zipfile.ZipFile(zip_path, "w", zipfile.ZIP_DEFLATED) as zipf:
    for file in project_root.rglob("*"):
        zipf.write(file, file.relative_to(project_root.parent))

zip_path
